---
title: Cloud Controller
owner: CAPI
---

Cloud Controller in <%= vars.app_runtime_first %> provides you with REST API endpoints to access the
system.
Cloud Controller maintains a database with tables for orgs, spaces,
services, user roles, and more.

<% if vars.platform_code == 'CF' %>
<%= partial 'cc_communications' %>
<% else %>
<% end %>

##<a id='auction'></a>Diego Auction

The Cloud Controller uses the [Diego Auction](../diego/diego-auction.html) to balance application
processes over the [Diego Cells](index.html#diego-cell) in a <%= vars.app_runtime_abbr %> installation.

##<a id='database'></a>Database (CC_DB)

<% if vars.platform_code == 'CF' %>
The Cloud Controller database has been tested with Postgres and MySQL.
<% else %>
The Cloud Controller database has been tested with MySQL.
<% end %>

##<a id='blob-store'></a>Blobstore

To stage and run apps, <%= vars.app_runtime_abbr %> manages and stores app source code and other files in an S3-compatible blobstore.

Please see [Cloud Controller blobstore](../cc-blobstore.html) for information.

##<a id='testing'></a>Testing

<% if vars.platform_code == 'CF' %>

By default `rspec` runs a test suite with the SQLite in-memory database.
Specify a connection string using the `DB_CONNECTION` environment variable to
test against Postgres and MySQL. For example:

~~~
    DB_CONNECTION="postgres://postgres@localhost:5432/ccng" rspec
    DB_CONNECTION="mysql2://root:password@localhost:3306/ccng" rspec
~~~

Travis currently runs two build jobs against Postgres and MySQL.

<% else %>

By default `rspec` runs a test suite with the SQLite in-memory database.
Specify a connection string using the `DB_CONNECTION` environment variable to
test against MySQL. For example:

~~~
    DB_CONNECTION="mysql2://root:password@localhost:3306/ccng" rspec
~~~

<% end %>

<%= vars.cloud_controller_logging %>
