---
title: User Account and Authentication (UAA) Server
owner: Identity
---



This topic provides an overview of the User Account and Authentication (UAA) Server, the identity management service for Cloud Foundry

The primary role of the UAA is as an OAuth2 provider, issuing tokens for client apps to use when they act on behalf of Cloud Foundry users.
In collaboration with the login server, the UAA can authenticate users with their Cloud Foundry credentials, and can act as an SSO service using those, or other, credentials.

The UAA has endpoints for managing user accounts and for registering OAuth2 clients, as well as various other management functions.

## <a id='quickstart'></a>Quick Start ##

You can deploy the UAA locally or to Cloud Foundry.

* [Deploy UAA Locally](#local)
* [Deploy UAA to Cloud Foundry](#cf)

### Requirements
* Java 8

### <a id='local'></a>Deploy UAA Locally ###

Follow the instructions below to deploy and run the UAA locally.

1. In a terminal window, clone the UAA GitHub repository. 

    <pre class="terminal">
    $ git clone git://github.com/cloudfoundry/uaa.git
    </pre>

2. Navigate to the directory where you cloned the UAA GitHub repository, then run the `./gradlew run` command to build and run all the components that
comprise the UAA and the example programs, `uaa`, `samples/api`, and `samples/app`.

    <pre class="terminal">
    $ cd uaa
    $ ./gradlew run
    </pre>

3. If successful, the three apps run together on a single instance of Tomcat
listening on port 8080, with endpoints `/uaa`, `/app`, and `/api`.

### <a id='demo-local'></a>Use Local UAA ###

Follow the steps below to access and use a locally-deployed UAA server.

1. Run the UAA server as described in the [Deploy Locally](#local) section, above. 

2. Open another terminal window. From the project base directory, run `curl localhost:8080/uaa/info -H "Accept: application/json"` to confirm the UAA is running. You should see basic information about the system. For example:

    <pre class="terminal">
    $ curl localhost:8080/uaa/info -H "Accept: application/json"
    {
      "app": {
        "version": "4.19.0"
      },
      "links": {
        "uaa": "http://localhost:8080/uaa",
        "passwd": "/forgot_password",
        "login": "http://localhost:8080/uaa",
        "register": "/create_account"
      },
      "zone_name": "uaa",
      "entityID": "cloudfoundry-saml-login",
      "commit_id": "af93628",
      "idpDefinitions": {},
      "prompts": {
        "username": [
          "text",
          "Email"
        ],
        "password": [
          "password",
          "Password"
        ]
      },
      "timestamp": "2018-05-25T15:34:31-0700"
    }
    </pre>

3. Run `gem install cf-uaac` to install the Cloud Foundry UAA Command Line Client (UAAC) Ruby gem.

    <pre class="terminal">
    $ gem install cf-uaac
    </pre>

3. Run `uaac target http://localhost:8080/uaa` to target the local UAA server endpoint.

    <pre class="terminal">
    $ uaac target http://localhost:8080/uaa
    </pre>

3. Run `uaac token client get CLIENT_NAME -s CLIENT_SECRET` to obtain an access token. Replace `CLIENT_NAME` and `CLIENT_SECRET` with actual values. For example, when starting up the UAA locally for development there should be a predefined [admin client](https://github.com/cloudfoundry/uaa/blob/a776ac3f2e6bf86e247097dc00df93c05a239c6e/uaa/src/main/webapp/WEB-INF/spring/oauth-clients.xml#L54) you can use:

    <pre class="terminal">
    $ uaac token client get admin -s adminsecret
    </pre>

    If you do not specify the client secret, UAAC will show an interactive prompt where you must enter the client secret value.
    
    The `uaac token client get` command requests an access token from the server using the OAuth2 [client credentials](https://tools.ietf.org/html/rfc6749#section-1.3.4) grant type.
    
4. View your UAAC token context. When UAAC obtains a token, the token and other metadata is stored in the `~/.uaac.yml` file on your local machine. To view the token you have obtained, use the command `uaac context`. For example:

    <pre class="terminal">
    $ uaac context
    [0]*[http://localhost:8080/uaa]

    [0]*[admin]
      client_id: admin
      access_token: eyJhbGciOiJIUzI1NiIsImtpZCI6ImxlZ2FjeS10b2tlbi1rZXkiLCJ0eXAiOiJKV1QifQ.eyJqdGkiOiIxOWYyNWU2Y2E5Y2M0ZWIyYTdmNTAxNmU0NDFjZThkNCIsInN1YiI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiY2xpZW50cy5yZWFkIiwiY2xpZW50cy5zZWNyZXQiLCJjbGllbnRzLndyaXRlIiwidWFhLmFkbWluIiwiY2xpZW50cy5hZG1pbiIsInNjaW0ud3JpdGUiLCJzY2ltLnJlYWQiXSwic2NvcGUiOlsiY2xpZW50cy5yZWFkIiwiY2xpZW50cy5zZWNyZXQiLCJjbGllbnRzLndyaXRlIiwidWFhLmFkbWluIiwiY2xpZW50cy5hZG1pbiIsInNjaW0ud3JpdGUiLCJzY2ltLnJlYWQiXSwiY2xpZW50X2lkIjoiYWRtaW4iLCJjaWQiOiJhZG1pbiIsImF6cCI6ImFkbWluIiwiZ3JhbnRfdHlwZSI6ImNsaWVudF9jcmVkZW50aWFscyIsInJldl9zaWciOiIyNjcxOTlkMSIsImlhdCI6MTUyODIzMjAxNywiZXhwIjoxNTI4Mjc1MjE3LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvdWFhL29hdXRoL3Rva2VuIiwiemlkIjoidWFhIiwiYXVkIjpbInNjaW0iLCJjbGllbnRzIiwidWFhIiwiYWRtaW4iXX0.L2cn6HqLQAEyqTrYYkL9Al_8JyfwB330er7DshUb9wg
      token_type: bearer
      expires_in: 43199
      scope: clients.read clients.secret clients.write uaa.admin clients.admin scim.write scim.read
      jti: 19f25e6ca9cc4eb2a7f5016e441ce8d4
    </pre>

    Copy the access token from this output for the following step.

5. Run `uaac token decode ACCESS-TOKEN-VALUE` to view information in the token, which is encoded using the [JSON Web Token](https://tools.ietf.org/html/rfc7519) format. Replace `ACCESS-TOKEN-VALUE` with your access token, copied from the `uaac context` output. The UAAC should display all the claims inside the token body. For example:

    <pre class="terminal">
    $ uaac token decode eyJhbGciOiJIUzI1NiIsImtpZCI6ImxlZ2FjeS10b2tlbi1rZXkiLCJ0eXAiOiJKV1QifQ.eyJqdGkiOiIxOWYyNWU2Y2E5Y2M0ZWIyYTdmNTAxNmU0NDFjZThkNCIsInN1YiI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiY2xpZW50cy5yZWFkIiwiY2xpZW50cy5zZWNyZXQiLCJjbGllbnRzLndyaXRlIiwidWFhLmFkbWluIiwiY2xpZW50cy5hZG1pbiIsInNjaW0ud3JpdGUiLCJzY2ltLnJlYWQiXSwic2NvcGUiOlsiY2xpZW50cy5yZWFkIiwiY2xpZW50cy5zZWNyZXQiLCJjbGllbnRzLndyaXRlIiwidWFhLmFkbWluIiwiY2xpZW50cy5hZG1pbiIsInNjaW0ud3JpdGUiLCJzY2ltLnJlYWQiXSwiY2xpZW50X2lkIjoiYWRtaW4iLCJjaWQiOiJhZG1pbiIsImF6cCI6ImFkbWluIiwiZ3JhbnRfdHlwZSI6ImNsaWVudF9jcmVkZW50aWFscyIsInJldl9zaWciOiIyNjcxOTlkMSIsImlhdCI6MTUyODIzMjAxNywiZXhwIjoxNTI4Mjc1MjE3LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvdWFhL29hdXRoL3Rva2VuIiwiemlkIjoidWFhIiwiYXVkIjpbInNjaW0iLCJjbGllbnRzIiwidWFhIiwiYWRtaW4iXX0.L2cn6HqLQAEyqTrYYkL9Al_8JyfwB330er7DshUb9wg

    Note: no key given to validate token signature

      jti: 19f25e6ca9cc4eb2a7f5016e441ce8d4
      sub: admin
      authorities: clients.read clients.secret clients.write uaa.admin clients.admin scim.write scim.read
      scope: clients.read clients.secret clients.write uaa.admin clients.admin scim.write scim.read
      client_id: admin
      cid: admin
      azp: admin
      grant_type: client_credentials
      rev_sig: 267199d1
      iat: 1528232017
      exp: 1528275217
      iss: http://localhost:8080/uaa/oauth/token
      zid: uaa
      aud: scim clients uaa admin
    </pre>

### <a id='cf'></a>Deploy UAA to Cloud Foundry ###

Follow the instructions below to build the UAA as an app and push it to Cloud Foundry using the Cloud Foundry Command Line Interface (cf CLI). 

1. In a terminal window, clone the UAA GitHub repository. 

    <pre class="terminal">
    $ git clone git://github.com/cloudfoundry/uaa.git
    </pre>

2. Navigate to the directory where you cloned the UAA GitHub repository, then run the `./gradlew :cloudfoundry-identity-uaa:war` command build the UAA as a WAR file. 

    <pre class="terminal">
    $ cd uaa
    $ ./gradlew :cloudfoundry-identity-uaa:war
    </pre>

3. Run the cf CLI `cf push APP-NAME -m 512M -p PATH-TO-WAR-FILE --no-start` command to push the app to Cloud Foundry. Replace `APP-NAME` with a name for your UAA app, and `PATH-TO-WAR-FILE` with the path to the WAR file you created in the previous step. For example:

    <pre class="terminal">
    $ cf push MYUAA -m 512M -p uaa/build/libs/cloudfoundry-identity-uaa-1.8.0.war --no-start
    </pre>

4. Run `cf set-env APP-NAME SPRING_PROFILES_ACTIVE default` to set the `SPRING_PROFILES_ACTIVE` environment variable with the value `default`. Replace `APP-NAME` with the name of your app that you used in the previous step. For example:

    <pre class="terminal">
    $ cf set-env MYUAA SPRING_PROFILES_ACTIVE default
    </pre>

5. Run `cf start APP-NAME` to start your app. Replace `APP-NAME` with the name of your app. For example:

    <pre class="terminal">
    $ cf start MYUAA
    </pre>

### <a id='demo-hosted'></a>Use Remote UAA ###

You use a UAA server that you pushed as an app to Cloud Foundry in a similar way to one you [run locally](#demo-local). You do not need app token encoding because you do not have the client secret.

Follow the steps below to access and use a UAA server that you pushed as an app to Cloud Foundry.


1. [Deploy UAA to Cloud Foundry](#cf) as described above. 

1. From the project base directory, run `curl -H "Accept: application/json" APP-FQDN/login` to query the external login endpoint about the system. Replace `APP-FQDN` with the FQDN of your app. For example:

    <pre class="terminal">
    $ curl -H "Accept: application/json" uaa.example.org/login
    {
      "timestamp":"2014-09-15T18:25:04+0000",
      "app":{"version":"1.8.3"},
      "commit_id":"git-metadata-not-found",
      "prompts":{"username":["text","Email"],
          "password":["password","Password"]
      }
    }
    </pre>

1. Run `gem install cf-uaac` to install the Cloud Foundry UAA Command Line Client (UAAC) Ruby gem.

    <pre class="terminal">
    $ gem install cf-uaac
    </pre>

3. Run `uaac target APP-FQDN` to target the remote UAA Server endpoint. Replace `APP-FQDN` with the FQDN of your app.
    <pre class="terminal">
    $ uaac target uaa.example.org
    </pre>

3. Run `uaac token get USERNAME PASSWORD` to log in. Replace `USERNAME` with your user name, and `PASSWORD` with your password. For example:

    <pre class="terminal">
    $ uaac token get marissa koala
    </pre>

    If you do not specify a username and password, the UAAC prompts you to 
    supply them.
    <br><br>
    The `uaac token client get` command authenticates and obtains an access 
    token from the server using the OAuth2 implicit grant, similar to the 
    approach intended for a standalone client like the Cloud Foundry Command 
    Line Interface (cf CLI). 

## <a id='integration'></a>Integration Tests ##

Run the integration tests with the following command:

<pre class="terminal">
$ ./gradlew integrationTest
</pre>

This command starts a UAA server running in a local Apache Tomcat instance. By default, the service URL is set to `http://localhost:8080/uaa`.

You can set the environment variable `CLOUD_FOUNDRY_CONFIG_PATH` to a directory containing a `uaa.yml` file where you change the URLs used in the tests, and where you can set the UAA server context root.

### <a id='custom-configuration'></a>Custom YAML Configuration ###

Follow the steps below to modify the runtime parameters.

1. Create a `uaa.yml` file in the following format:

    ```
    uaa:
      host: UAA-HOSTNAME
      test:
        username: USERNAME
        password: PASSWORD
        email: EMAIL-ADDRESS
    ```

    Replace the values in the above format as follows:
    * **UAA-HOSTNAME**: The FQDN of UAA app. Example: `uaa.example.org`
    * **USERNAME**: A valid username. Example: `dev@example.org`
    * **PASSWORD**: Password for the above username.
    * **EMAIL-ADDRESS**: Email address for the above user. Example: `dev@example.org`

1. From the `uaa/uaa` directory, run `CLOUD_FOUNDRY_CONFIG_PATH=/tmp ./gradlew test`.

1. The web app looks for a YAML file in the following locations when it starts, with later entries overriding earlier ones:

    ```yaml
    classpath:uaa.yml
    file:${CLOUD_FOUNDRY_CONFIG_PATH}/uaa.yml
    file:${UAA_CONFIG_FILE}
    ${UAA_CONFIG_URL}
    ```

###<a id='gradle-test'></a>Test with PostgreSQL or MySQL ###

The default UAA unit tests, `./gradlew test`, use HyperSQL (hsqldb). 

To use a different database management system, create a `uaa.yml` file containing `spring_profiles: default,OTHER-DBMS` in the `src/main/resources/` directory. Replace `OTHER-DBMS` with the name of the other database management system to use.

For example, run the following command to run the unit tests using PostgreSQL instead of hsqldb:

<pre class="terminal">
$ echo "spring_profiles: default,postgresql" > src/main/resources/uaa.yml
$ ./gradlew test integrationTest
</pre>

Run the following command to run the unit tests using MySQL instead of hsqldb:

<pre class="terminal">
$ echo "spring_profiles: default,mysql" > src/main/resources/uaa.yml
$ ./gradlew test integrationTest
</pre>

You can find the database configuration for the common and scim modules at `common/src/test/resources/(mysql|postgresql).properties` and `scim/src/test/resources/(mysql|postgresql).properties`.

## <a id='projects'></a>UAA Projects ##

The following UAA projects exist:

* `common`: A module containing a JAR with all the business logic. `common` is used in the web apps listed below.

* `uaa`: The UAA server. `uaa` provides an authentication service and authorized delegation for back-end services and apps by issuing OAuth2 access tokens.

* `api`: A sample OAuth2 resource service that returns a mock list of deployed apps. `api` provides resources that other apps might want to access on behalf of the resource owner.

* `app`: A sample user app that uses both `api` and `uaa`. `app` is a web app that requires single sign-on and access to the `api` service on behalf of users.

* `scim`: The <a href="http://www.simplecloud.info/">SCIM</a> user management module used by UAA.

### <a id='uaa-server'></a>UAA Server ###

The authentication service, `uaa`, is a Spring MVC web app. You can deploy it in Tomcat or your container of choice, or execute `./gradlew run` to run it directly from the `uaa` directory in the source tree. When run with Gradle, `uaa` listens on port `8080` and has URL `http://localhost:8080/uaa`.

The UAA Server supports the APIs defined in the UAA-APIs document which include the following:

* The OAuth2 `/authorize` and `/token` endpoints

* A `/login_info` endpoint to allow querying for required login prompts

* A `/check_token` endpoint to allow resource servers to obtain information about an access token submitted by an OAuth2 client

* SCIM user provisioning endpoint

* OpenID connect endpoints to support authentication `/userinfo` and `/check_id`

Command line clients can perform authentication by submitting credentials directly to the `/authorize` endpoint.

An `ImplicitAccessTokenProvider` exists in Spring Security OAuth to use if your client is Java.

By default, `uaa` will launch with a context root `/uaa`.

#### <a id='configuration'></a>Configuration ####

A `uaa.yml` file exists in the app. This file provides defaults to the placeholders in the Spring XML.

You can override any occurrences of `${placeholder.name}` in the XML by adding it to the `uaa.yml` file, or by providing a System property, `-D` to JVM, with the same name. 

All passwords and client secrets in the config files are in plain text, but are inserted into the UAA database encrypted with BCrypt.

#### <a id='user-account-data'></a>User Account Data ####

The default uses an in-memory RDBMS user store, pre-populated with a single test user `marissa` with password `koala`.

To use PostgreSQL for user data, activate the Spring profile `postgresql`.

You can configure the active profiles in `uaa.yml` using the following:

```yaml
spring_profiles: postgresql,default
```

To use PostgreSQL instead of HyperSQL (hsqldb):

<pre class="terminal">
$ echo "spring_profiles: postgresql,default" > src/main/resources/uaa.yml
$ ./gradlew run
</pre>

To bootstrap a microcloud-type environment, you need an admin client. A database initializer component that inserts an admin client exists.
If the default profile is active, for example not `postgresql`, a cf CLI client exists so that the Gem login works with no additional configuration required. You can override the default settings and add additional clients in the `uaa.yml` file:

```yaml
oauth:
  clients:
    admin:
      authorized-grant-types: client_credentials
      scope: read,write,password
      authorities: ROLE_CLIENT,ROLE_ADIN
      id: admin
      secret: adminclientsecret
      resource-ids: clients
```
You can use the admin client to create additional clients.
You must have a client with read/write access to the `scim` resource to create user accounts.
The integration tests handle this automatically by inserting client and user accounts as necessary for the tests.

### <a id='samples'></a>Sample Apps ###

Two sample apps are included with the UAA: `/api` and `/app`.

Run them with `./gradlew run` from the `uaa` root directory. All three apps, `/uaa`, `/api`, and `/app`, are simultaneously deployed.

#### <a id='api-application'></a> API Sample App ####

The `api` sample app is an example resource server. It hosts a service that returns a list of mock apps under `/apps`.

#### <a id='app-application'></a> APP Sample App ####

The `app` sample app is a user interface app, primarily aimed at browsers, that uses OpenID Connect for authentication and OAuth2 for access grants. `app` authenticates with the Auth service, then accesses resources in the API service.
Run it with `./gradlew run` from the `uaa` root directory.

The app can operate in multiple different profiles according to the location and presence of the UAA server and the login app.
By default, the app looks for a UAA on `localhost:8080/uaa`, but you can change this by setting the `UAA_PROFILE` environment variable or System Property.

The app source code, `samples/app/src/main/resources`, contains multiple properties files pre-configured with different likely locations for those servers. The names of these properties files follow the form `app-UAA_PROFILE.properties`.

The naming convention for the `UAA_PROFILE` is as follows: 

* `local`: a localhost deployment

* `vcap`: a `vcap.me` deployment

* `staging`: a staging deployment

Profile names can be hyphenated to indicate multiple contexts. For example, `local-vcap` can be used when the login server is in a different location than the UAA server.

##### Use Cases #####

1. See all apps:

        GET /app/apps

    Browser is redirected through a series of authentication and access grant steps, and then the photos are shown.

2. See the currently logged in user details, a selection of attributes from the OpenID provider:

        GET /app

#### <a id='login-application'></a>LOGIN App ####

The `login` app is a user interface for authentication. 
The UAA can also authenticate user accounts, but only if it manages them itself,
and it only provides a basic UI.
You can brand and customize the login app for non-native authentication and for more complicated UI flows, like user registration and password reset.

The login app is itself an OAuth2 endpoint provider, but delegates those features to the UAA server.
Therefore, configuration for the login app consists of locating the UAA through its OAuth2 endpoint URLs and registering the login app itself as a client of the UAA.
A `login.yml` for the UAA locations exists, such as for a local `vcap` instance:

```yaml
uaa:
  url: http://uaa.vcap.example.net
  token:
    url: http://uaa.vcap.example.net/oauth/token
  login:
    url: http://uaa.vcap.example.net/login.do
```

An environment variable or Java System property also exists, `LOGIN_SECRET`, for the client secret that the app uses when it authenticates itself with the UAA.
The login app is registered by default in the UAA only if there are no active Spring profiles.
In the UAA, the registration is located in the `oauth-clients.xml` config file:

```yaml
id: login
secret: loginsecret
authorized-grant-types: client_credentials
authorities: ROLE_LOGIN
resource-ids: oauth
```

#### Use Cases ####

1. Authenticate:

        GET /login

    The sample app presents a form login interface for the backend UAA, and an OpenID widget where a user can authenticate using Google or other credentials.

2. Approve OAuth2 token grant:

        GET /oauth/authorize?client_id=app&response_type=code...

    Standard OAuth2 Authorization Endpoint. The UAA handles client credentials and all other features in the back end, and the login app is used to render the UI.

3. Obtain access token:

        POST /oauth/token
    Standard OAuth2 Authorization Endpoint passed through to the UAA.

## <a id='scopes'></a>Scopes ##

UAA covers multiple scopes of privilege, including access to UAA, access to [Cloud Controller](index.html#cc), and access to the [router](index.html#router).

See the tables below for a description of the scopes covered by UAA:

* [UAA Scopes](#uaa-scopes)
* [Cloud Controller Scopes](#cc-scopes)
* [Router Scopes](#router-scopes)
* [Other Scopes](#other-scopes)

### <a id="uaa-scopes"></a>UAA Scopes
<table>
  <tr>
    <th>Scope</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>uaa.user</code></td>
    <td>This scope indicates that this is a user. It is required in the token if submitting a GET request to the OAuth 2 <code>/authorize</code> endpoint.</td>
  </tr>
  <tr>
    <td><code>uaa.none</code></td>
    <td>This scope indicates that this client will not be performing actions on behalf of a user.</td>
  </tr>
  <tr>
    <td><code>uaa.admin</code></td>
    <td>This scopes indicates that this is the superuser.</td>
  </tr>
  <tr>
    <td><code>scim.write</code></td>
    <td>This scope gives admin write access to all SCIM endpoints, <code>/Users</code>, and <code>/Groups</code>.</td>
  </tr>
  <tr>
    <td><code>scim.read</code></td>
    <td>This scope gives admin read access to all SCIM endpoints, <code>/Users</code>, and <code>/Groups</code>.</td>
  </tr>
  <tr>
    <td><code>scim.create</code></td>
    <td>This scope gives the ability to create a user with a POST request to the <code>/Users</code> endpoint, but not to modify, read, or delete users.</td>
  </tr>
  <tr>
    <td><code>scim.userids</code></td>
    <td>This scope is required to convert a username and origin into a user ID and vice versa.</td>
  </tr>
  <tr>
    <td><code>scim.invite</code></td>
    <td>This scope is required to participate in invitations using the <code>/invite_users</code> endpoint.</td>
  </tr>
  <tr>
    <td><code>groups.update</code></td>
    <td>This scope gives the ability to update a group. This ability can also be provided by the broader <code>scim.write</code> scope.</td>
  </tr>
  <tr>
    <td><code>password.write</code></td>
    <td>This admin scope gives the ability to change a user's password.</td>
  </tr>
  <tr>
    <td><code>openid</code></td>
    <td>This scope is required to access the <code>/userinfo</code> endpoint. It is intended for OpenID clients.</td>
  </tr>
  <tr>
    <td><code>idps.read</code></td>
    <td>This scope gives read access to retrieve identity providers from the <code>/identity-providers</code> endpoint.</td>
  </tr>
  <tr>
    <td><code>idps.write</code></td>
    <td>This scope gives the ability to create and update identity providers from the <code>/identity-providers</code> endpoint.</td>
  </tr>
  <tr>
    <td><code>clients.admin</code></td>
    <td>This scope gives the ability to create, modify, and delete clients.</td>
  </tr>
  <tr>
    <td><code>clients.write</code></td>
    <td>This scope is required to create and modify clients. The scopes are prefixed with the scope holder's client ID. For example, <code>id:testclient authorities:client.write</code> gives the ability to create a client that has scopes with the <code>testclient.</code> prefix. Authorities are limited to <code>uaa.resource</code>.</td>
  </tr>
  <tr>
    <td><code>clients.read</code></td>
    <td>This scope gives the ability to read information about clients.</code></td>
  </tr>
  <tr>
    <td><code>clients.secret</code></td>
    <td>This admin scope is required to change the password of a client.</td>
  </tr>
  <tr>
    <td><code>zones.read</code></td>
    <td>This scope is required to invoke the <code>/identity-zones</code> endpoint to read identity zones.</td>
  </tr>
  <tr>
    <td><code>zones.write</code></td>
    <td>This scope is required to invoke the <code>/identity-zones</code> endpoint to create and update identity zones.</td>
  </tr>
  <tr>
    <td><code>scim.zones</code></td>
    <td>This is a limited scope that only allows adding a user to, or removing a user from, zone management groups under the path <code>/Groups/zones</code>.</td>
    <tr>
      <td><code>oauth.approval</code></td> 
      <td><code>/approvals endpoint</code>. This scope is required to approve or reject clients to act on a user's behalf. This is a default scope defined in the <code>uaa.yml</code> file.</td>
    </tr>
    <tr>
      <td><code>oauth.login</code></td>
      <td>This scope is used to indicate a login app, such as external login servers, can perform trusted operations, such as creating users not authenticated in the UAA.</td>
    </tr>
    <tr>
      <td><code>approvals.me</code></td>
      <td>This scope is not currently used.</td>
    </tr>
    <tr>
      <td><code>uaa.resource</code></td>
      <td>This scope indicates that this is a resource server, used for the <code>/check_token</code> endpoint.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.admin</code></td>
      <td>This scope permits operations in a designated zone, such as creating identity providers or clients in another zone, by authenticating against the default zone. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.read</code></td>
      <td>This scope permits reading the given identity zone. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.clients.admin</code></td>
      <td>This scope translates into <code>clients.admin</code> after zone switch completes. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>  
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.clients.read</code></td>
      <td>This scope translates into <code>clients.read</code> after zone switch completes. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.clients.write</code></td>
      <td>This scope translates into <code>clients.write</code> after zone switch completes. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.clients.scim.read</code></td>
      <td>This scope translates into <code>scim.read</code> after zone switch completes. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.clients.scim.create</code></td>
      <td>This scope translates into <code>scim.create</code> after zone switch completes. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.clients.scim.write</code></td>
      <td>This scope translates into <code>scim.write</code> after zone switch completes. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
    <tr>
      <td nowrap><code>zones.ZONE-ID.idps.read</code></td>
      <td>This scope translates into <code>idps.read</code> after zone switch completes. This scope is used with the <code>X-Identity-Zone-Id header</code>.</td>
    </tr>
  </tr> 
</table>

### <a id="cc-scopes"></a>Cloud Controller Scopes

<table>
  <tr>
    <th>Scope</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>cloud_controller.read</code></td>
    <td>This scope gives the ability to read from any Cloud Controller route the token has access to.</td>
  </tr>
  <tr>
    <td><code>cloud_controller.write</code></td>
    <td>This scope gives the ability to post to Cloud Controller routes the token has access to.</td>
  </tr>
  <tr>
    <td><code>cloud_controller.admin</code></td>
    <td>This admin scope gives full permissions to Cloud Controller.</td>
  </tr>
  <tr>
    <td><code>cloud_controller.admin_read_only</code></td>
    <td>This admin scope gives read permissions to Cloud Controller.</td>
  </tr>
  <tr>
    <td><code>cloud_controller.global_auditor</code></td>
    <td>This scope gives read-only access to all Cloud Controller API resources except for secrets such as environment variables.</td>
  </tr>
</table>

### <a id="routing-scopes"></a>Routing Scopes

<table>
  <tr>
    <th>Scope</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>routing.routes.read</code></td>
    <td>This scope gives the ability to read the full routing table from the router.</td>
  </tr>
  <tr>
    <td><code>routing.routes.write</code></td>
    <td>This scope gives the ability to write the full routing table from the router.</td>
  </tr>
  <tr>
    <td><code>routing.router_groups.read</code></td>
    <td>This scope gives the ability to read the full list of routing groups.</td>
  </tr>
  <tr>
    <td><code>routing.router_groups.write</code></td>
    <td>This scopes gives the ability to write the full list of routing groups.</td>
  </tr>
</table>

### <a id="other-scopes"></a>Other Scopes

<table>
  <tr>
    <th>Scope</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>doppler.firehose</code></td>
    <td>This scope gives the ability to read logs from the <%= vars.loggregator_firehose_link %> endpoint.</td>
  </tr>
  <tr>
    <td><code>notifications.write</code></td>
    <td>This scope gives the ability to send notifications through the <%= vars.notifications_link %>.</td>
  </tr>
</table>
